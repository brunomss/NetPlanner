/*******************************************************************************
 * Copyright (c) 2013-2015 Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 *
 * Contributors:
 *     Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza - initial API and implementation
 ******************************************************************************/
package com.net2plan.gui.utils;

import com.net2plan.internal.ErrorHandling;
import com.net2plan.interfaces.networkDesign.Configuration;
import com.net2plan.internal.SystemUtils;
import com.net2plan.utils.StringUtils;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Set;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import net.miginfocom.swing.MigLayout;

/**
 * <p>Class implementing the class-path editor.</p>
 *
 * @author Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza
 * @since 0.2.0
 */
public class ClassPathEditor
{
	private final static JFileChooser fc;
	private final static JDialog classPathEditor;
	private final static DefaultTableModel model;
	private final static AdvancedJTable table;
	private final static JButton addItem, removeSelected, removeAll;

	static
	{
		fc = new JFileChooser();
		fc.setCurrentDirectory(SystemUtils.getCurrentDir());
		fc.setDialogTitle("Select a JAR file");
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setAcceptAllFileFilterUsed(false);
		fc.setMultiSelectionEnabled(true);
		fc.setFileFilter(null);
		FileFilter filter = new FileNameExtensionFilter("JAR file", "jar");
		fc.addChoosableFileFilter(filter);

		classPathEditor = new JDialog();
		classPathEditor.setTitle("Classpath editor");
		SwingUtils.configureCloseDialogOnEscape(classPathEditor);
		classPathEditor.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
		classPathEditor.setSize(new Dimension(500, 300));
		classPathEditor.setLocationRelativeTo(null);
		classPathEditor.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
		classPathEditor.setLayout(new MigLayout("insets 0 0 0 0", "[grow]", "[][][grow][]"));

		model = new ClassAwareTableModel();
		table = new AdvancedJTable(model);

		JPanel pane = new JPanel();

		addItem = new JButton("Add file");
		addItem.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				try
				{
					if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
					{
						for (File file : fc.getSelectedFiles())
						{
							String previousClasspath = Configuration.getOption("classpath");
							String path = file.getCanonicalPath();
							Configuration.setOption("classpath", previousClasspath.isEmpty() ? path : previousClasspath + ";" + path);
							SystemUtils.addToClasspath(file);
						}

						Configuration.saveOptions();
						refresh();
					}
				}
				catch (Throwable ex)
				{
					ErrorHandling.addErrorOrException(ex);
					ErrorHandling.showErrorDialog("Error adding classpath items");
				}
			};
		});

		removeSelected = new JButton("Remove selected");
		removeSelected.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				String currentClasspath = Configuration.getOption("classpath");
				try
				{
					int row = table.getSelectedRow();
					if (row == -1) return;
					row = table.convertRowIndexToModel(row);
					
					StringBuilder classpath = new StringBuilder();
					int numRows = model.getRowCount();
					for(int i = 0; i < numRows; i++)
					{
						if (i == row) continue;
					
						if (classpath.length() > 0) classpath.append(";");
						String path = (String) model.getValueAt(i, 0);
						path = path.replace(SystemUtils.getDirectorySeparator(), "\\");
						classpath.append(path);
					}

					Configuration.setOption("classpath", classpath.toString());
					Configuration.saveOptions();
					
					model.removeRow(row);
					if (model.getRowCount() == 0) resetTable();
				}
				catch (Throwable ex)
				{
					Configuration.setOption("classpath", currentClasspath);
					ErrorHandling.addErrorOrException(ex);
					ErrorHandling.showErrorDialog("Error removing classpath items");
				}
			}
		});

		removeAll = new JButton("Remove all");
		removeAll.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				try
				{
					Configuration.setOption("classpath", "");
					Configuration.saveOptions();
					while (model.getRowCount() > 0)
						model.removeRow(0);

					resetTable();
				}
				catch (Throwable ex)
				{
					ErrorHandling.addErrorOrException(ex);
					ErrorHandling.showErrorDialog("Error removing classpath items");
				}
			}
		});

		pane.add(addItem);
		pane.add(removeSelected);
		pane.add(removeAll);

		classPathEditor.add(new JLabel("<html>Algorithms and reports made by users may require external Java libraries<br />not included within Net2Plan. Use this option to include them</html>", JLabel.CENTER), "grow, wrap");
		classPathEditor.add(pane, "grow, wrap");
		classPathEditor.add(new JScrollPane(table), "grow, wrap");
		classPathEditor.add(new JLabel("<html>In the current version it is recommended to restart Net2Plan after removing libraries<br /> since they are not actually unloaded from memory</html", JLabel.CENTER), "grow");

		resetTable();
	}

	private static void refresh()
	{
		resetTable();
		
		Set<URL> userClasspath = SystemUtils.getUserClasspath();
		if (!userClasspath.isEmpty())
		{
			URI currentPath = SystemUtils.getCurrentDir().toURI();
			model.removeRow(0);
			for(URL url : userClasspath)
			{
				String path;
				try	{ path = url.toURI().toString(); }
				catch (URISyntaxException ex) { throw new RuntimeException(ex); }
				
				path = path.replace(currentPath.toString(), "");
				path = path.replace("/", SystemUtils.getDirectorySeparator());
				
				model.addRow(new Object[] { path });
			}
			
			table.setEnabled(true);
			removeSelected.setEnabled(true);
			removeAll.setEnabled(true);
		}
	}
	
	private static void resetTable()
	{
		model.setDataVector(new Object[1][], StringUtils.arrayOf("Path"));
		table.setEnabled(false);

		removeSelected.setEnabled(false);
		removeAll.setEnabled(false);
	}

	/**
	 * Shows the classpath GUI.
	 * 
	 * @since 0.2.0
	 */
	public static void showGUI()
	{
		if (!classPathEditor.isVisible())
		{
			refresh();
			classPathEditor.setVisible(true);
		}
	}
}
