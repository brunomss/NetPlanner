/*******************************************************************************
 * Copyright (c) 2013-2015 Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 *
 * Contributors:
 *     Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza - initial API and implementation
 ******************************************************************************/
package com.net2plan.gui.utils.topology.jung;

import com.net2plan.internal.plugins.ITopologyCanvas;
import com.net2plan.gui.utils.topology.ITopologyCanvasPlugin;
import com.net2plan.interfaces.networkDesign.Net2PlanException;
import com.net2plan.gui.utils.topology.Link;
import com.net2plan.gui.utils.topology.Node;
import com.net2plan.utils.Pair;
import com.net2plan.utils.Triple;
import edu.uci.ics.jung.algorithms.layout.GraphElementAccessor;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.algorithms.layout.StaticLayout;
import edu.uci.ics.jung.graph.DirectedOrderedSparseMultigraph;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.util.Context;
import edu.uci.ics.jung.visualization.Layer;
import edu.uci.ics.jung.visualization.RenderContext;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.GraphMousePlugin;
import edu.uci.ics.jung.visualization.control.LayoutScalingControl;
import edu.uci.ics.jung.visualization.control.PluggableGraphMouse;
import edu.uci.ics.jung.visualization.control.ScalingControl;
import edu.uci.ics.jung.visualization.control.ScalingGraphMousePlugin;
import edu.uci.ics.jung.visualization.decorators.ConstantDirectionalEdgeValueTransformer;
import edu.uci.ics.jung.visualization.decorators.PickableEdgePaintTransformer;
import edu.uci.ics.jung.visualization.decorators.PickableVertexPaintTransformer;
import edu.uci.ics.jung.visualization.renderers.BasicEdgeLabelRenderer;
import edu.uci.ics.jung.visualization.renderers.BasicVertexLabelRenderer;
import edu.uci.ics.jung.visualization.renderers.DefaultEdgeLabelRenderer;
import edu.uci.ics.jung.visualization.renderers.Renderer;
import static edu.uci.ics.jung.visualization.renderers.Renderer.VertexLabel.Position.CNTR;
import static edu.uci.ics.jung.visualization.renderers.Renderer.VertexLabel.Position.NE;
import edu.uci.ics.jung.visualization.transform.BidirectionalTransformer;
import edu.uci.ics.jung.visualization.transform.MutableTransformer;
import edu.uci.ics.jung.visualization.transform.shape.GraphicsDecorator;
import edu.uci.ics.jung.visualization.transform.shape.ShapeTransformer;
import edu.uci.ics.jung.visualization.transform.shape.TransformingGraphics;
import edu.uci.ics.jung.visualization.util.ArrowFactory;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JComponent;
import org.apache.commons.collections15.Predicate;
import org.apache.commons.collections15.Transformer;
import org.apache.commons.collections15.functors.ConstantTransformer;

/**
 * Topology canvas using JUNG library [<a href='#jung'>JUNG</a>].
 * 
 * @author Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza
 * @since 0.2.3
 * @see <a name='jung'></a><a href='http://jung.sourceforge.net/'>Java Universal Network/Graph Framework (JUNG) website</a>
 */
public final class JUNGCanvas extends ITopologyCanvas
{
	private final static Color CANVAS_BGCOLOR = new Color(212, 208, 200);
	private int FONT_SIZE = 11;
	private double NODE_SIZE = 30;
	
	private final Graph<Node, Link> g;
	private final Layout<Node, Link> l;
	private final Transformer<Node, Point2D> transformer;
	private final VisualizationViewer<Node, Link> vv;
	private final Map<Long, Node> nodeTable;
	private final Map<Long, Link> linkTable;
	private final PluggableGraphMouse gm;
	private final static float scaleIn = 1.1f;
	private final static float scaleOut = 1 / scaleIn;
	private final ScalingControl scalingControl;
	private final Set<Link> linksDown, hiddenLinks, backupPath;
	private final Set<Node> nodesDown, hiddenNodes;

	private boolean showNodeNames, showLinkIds, showHideNonConnectedNodes;
	
	/**
	 * Default constructor.
	 * 
	 * @since 0.2.3
	 */
	public JUNGCanvas()
	{
		backupPath = new LinkedHashSet<Link>();

		nodeTable = new LinkedHashMap<Long, Node>();
		linkTable = new LinkedHashMap<Long, Link>();

		linksDown = new LinkedHashSet<Link>();
		nodesDown = new LinkedHashSet<Node>();

		g = new DirectedOrderedSparseMultigraph<Node, Link>();
		transformer = new TransformerImpl();
		l = new StaticLayout<Node, Link>(g, transformer);
		vv = new VisualizationViewer<Node, Link>(l);
		
		/* Customize the graph */
		vv.getRenderContext().setVertexDrawPaintTransformer(new ConstantTransformer(Color.BLACK));
		vv.getRenderContext().setVertexFillPaintTransformer(new StateAwareTransformer(new PickableVertexPaintTransformer<Node>(vv.getPickedVertexState(), Color.BLACK, Color.BLUE)));
		vv.getRenderContext().setVertexFontTransformer(new ConstantTransformer(new Font("Helvetica", Font.BOLD, FONT_SIZE)));
		vv.getRenderContext().setVertexShapeTransformer(new Transformer<Node, Shape>()
		{
			@Override
			public Shape transform(Node i)
			{
				double scaleFactor = vv.getPickedVertexState().isPicked(i) ? 1.2 : 1;
				return new Ellipse2D.Double(-scaleFactor * NODE_SIZE / 2, -scaleFactor * NODE_SIZE / 2, scaleFactor * NODE_SIZE, scaleFactor * NODE_SIZE);
			}
		});
		
		vv.getRenderContext().setVertexIncludePredicate(new NodeDisplayPredicate<Node, Link>());
		vv.getRenderContext().setEdgeIncludePredicate(new LinkDisplayPredicate<Node, Link>());
		vv.getRenderContext().setEdgeArrowPredicate(new LinkDisplayPredicate<Node, Link>());

		vv.getRenderContext().setEdgeArrowStrokeTransformer(new Transformer<Link, Stroke>()
		{
			@Override
			public Stroke transform(Link i)
			{
				return new BasicStroke(vv.getPickedEdgeState().isPicked(i) ? 2 : 1);
			}
		});
		
		vv.getRenderContext().setEdgeArrowTransformer(new ConstantTransformer(ArrowFactory.getNotchedArrow(7, 10, 5)));
		vv.getRenderContext().setEdgeDrawPaintTransformer(new StateAwareTransformer(new PickableEdgePaintTransformer<Link>(vv.getPickedEdgeState(), Color.BLACK, Color.BLUE)));
		vv.getRenderContext().setEdgeLabelClosenessTransformer(new ConstantDirectionalEdgeValueTransformer(.5, .5));
		vv.getRenderContext().setEdgeStrokeTransformer(new Transformer<Link, Stroke>()
		{
			@Override
			public Stroke transform(Link i)
			{
				if (backupPath.contains(i))
					return new BasicStroke(vv.getPickedEdgeState().isPicked(i) ? 2 : 1, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER, 10.0f, new float[] { 10 }, 0.0f);
				else
					return new BasicStroke(vv.getPickedEdgeState().isPicked(i) ? 2 : 1);
			}
		});

		vv.getRenderContext().setArrowDrawPaintTransformer(new StateAwareTransformer(new PickableEdgePaintTransformer<Link>(vv.getPickedEdgeState(), Color.BLACK, Color.BLUE)));
		vv.getRenderContext().setArrowFillPaintTransformer(new StateAwareTransformer(new PickableEdgePaintTransformer<Link>(vv.getPickedEdgeState(), Color.BLACK, Color.BLUE)));

		vv.getRenderer().setVertexLabelRenderer(new NodeLabelRenderer());
		vv.getRenderContext().setEdgeLabelRenderer(new DefaultEdgeLabelRenderer(Color.BLUE));
		vv.getRenderer().setEdgeLabelRenderer(new LinkIdRenderer());

		showNodeNames(false);
		showNonConnectedNodes(true);
		showLinkIds(false);

		gm = new PluggableGraphMouse();
		vv.setGraphMouse(gm);

		scalingControl = new LayoutScalingControl();
		ITopologyCanvasPlugin scalingPlugin = new ScalingCanvasPlugin(scalingControl, MouseEvent.NOBUTTON);
		addPlugin(scalingPlugin);

		vv.setBackground(CANVAS_BGCOLOR);

		hiddenNodes = new LinkedHashSet<Node>();
		hiddenLinks = new LinkedHashSet<Link>();
		
		reset();
	}
	
	@Override
	public void addLink(long linkId, long originNodeId, long destinationNodeId)
	{
		addLink(linkId, originNodeId, destinationNodeId, null);
	}

	@Override
	public void addNode(long nodeId, Point2D pos, String label)
	{
		if (nodeTable.containsKey(nodeId)) throw new RuntimeException("Bad - Node " + nodeId + " already exists");
		if (label == null) label = "Node " + nodeId;
		
		Node node = new Node(nodeId, pos, label);
		nodeTable.put(nodeId, node);
		g.addVertex(node);
	}

	@Override
	public void addPlugin(ITopologyCanvasPlugin plugin)
	{
		plugin.setCanvas(this);
		gm.add(new GraphMousePluginAdapter(plugin));
	}

	@Override
	public Point2D convertViewCoordinatesToRealCoordinates(Point screenPoint)
	{
		Point2D layoutCoordinates = vv.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.LAYOUT, screenPoint);
		layoutCoordinates.setLocation(layoutCoordinates.getX(), -layoutCoordinates.getY());
		
		return layoutCoordinates;
	}
	
	@Override
	public void decreaseFontSize()
	{
		if (FONT_SIZE == 1) return;
		
		FONT_SIZE--;
		vv.getRenderContext().setVertexFontTransformer(new ConstantTransformer(new Font("Helvetica", Font.BOLD, FONT_SIZE)));
		refresh();
	}

	@Override
	public void decreaseNodeSize()
	{
		NODE_SIZE *= scaleOut;
		refresh();
	}

	@Override
	public JComponent getComponent()
	{
		return vv;
	}
	
	@Override
	public String getDescription()
	{
		return null;
	}

	@Override
	public JComponent getInternalComponent()
	{
		return vv;
	}
	
	@Override
	public long getLink(MouseEvent e)
	{
		final VisualizationViewer<Node, Link> vv = (VisualizationViewer<Node, Link>) e.getSource();
		GraphElementAccessor<Node, Link> pickSupport = vv.getPickSupport();
		if (pickSupport != null)
		{
			final Point p = e.getPoint();
			final Link edge = pickSupport.getEdge(vv.getModel().getGraphLayout(), p.getX(), p.getY());
			if (edge != null) return edge.getId();
		}
		
		return -1;
	}
	
	@Override
	public String getName()
	{
		return "JUNG Canvas";
	}

	@Override
	public long getNode(MouseEvent e)
	{
		final VisualizationViewer<Node, Link> vv = (VisualizationViewer<Node, Link>) e.getSource();
		GraphElementAccessor<Node, Link> pickSupport = vv.getPickSupport();
		if (pickSupport != null)
		{
			final Point p = e.getPoint();
			final Node vertex = pickSupport.getVertex(vv.getModel().getGraphLayout(), p.getX(), p.getY());
			if (vertex != null) return vertex.getId();
		}
		
		return -1;
	}

	@Override
	public List<Triple<String, String, String>> getParameters()
	{
		return null;
	}

	@Override
	public void increaseFontSize()
	{
		FONT_SIZE++;
		vv.getRenderContext().setVertexFontTransformer(new ConstantTransformer(new Font("Helvetica", Font.BOLD, FONT_SIZE)));
		refresh();
	}

	@Override
	public void increaseNodeSize()
	{
		NODE_SIZE *= scaleIn;
		refresh();
	}

	@Override
	public boolean isLinkVisible(long linkId)
	{
		return !hiddenLinks.contains(linkTable.get(linkId));
	}
	
	@Override
	public boolean isNodeVisible(long nodeId)
	{
		return !hiddenNodes.contains(nodeTable.get(nodeId));
	}
	
	@Override
	public void panTo(Point initialPoint, Point currentPoint)
	{
		final MutableTransformer layoutTransformer = vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);
		final Point2D q = layoutTransformer.inverseTransform(initialPoint);
		final Point2D lvc =  layoutTransformer.inverseTransform(currentPoint);
		final double dx = (lvc.getX() - q.getX());
		final double dy = (lvc.getY() - q.getY());
		layoutTransformer.translate(dx, dy);				
	}
	
	@Override
	public void refresh()
	{
		vv.repaint();
	}

	@Override
	public void removeLink(long linkId)
	{
		removeLink(linkId, true);
	}

	@Override
	public void removeNode(long nodeId)
	{
		Node node = nodeTable.get(nodeId);

		Iterator<Link> linkIt;
		Collection<Link> outLinks = g.getOutEdges(node);
		if (outLinks == null) outLinks = new LinkedHashSet<Link>();
		linkIt = outLinks.iterator();
		while (linkIt.hasNext()) removeLink(linkIt.next().getId(), false);

		Collection<Link> inLinks = g.getInEdges(node);
		if (inLinks == null) inLinks = new LinkedHashSet<Link>();
		linkIt = inLinks.iterator();
		while (linkIt.hasNext()) removeLink(linkIt.next().getId(), false);
	
		nodeTable.remove(nodeId);
		g.removeVertex(node);
	}

	@Override
	public void removePlugin(ITopologyCanvasPlugin plugin)
	{
		if (plugin instanceof GraphMousePlugin) gm.remove((GraphMousePlugin) plugin);
	}

	@Override
	public void reset()
	{
		Iterator<Link> linkIt = linkTable.values().iterator();
		while (linkIt.hasNext()) g.removeEdge(linkIt.next());

		Iterator<Node> nodeIt = nodeTable.values().iterator();
		while (nodeIt.hasNext()) g.removeVertex(nodeIt.next());

		nodeTable.clear();
		linkTable.clear();

		resetDownState();

		hiddenNodes.clear();
		hiddenLinks.clear();

		refresh();
	}

	@Override
	public void resetDownState()
	{
		nodesDown.clear();
		linksDown.clear();
	}

	@Override
	public void resetPickedState()
	{
		backupPath.clear();

		vv.getPickedVertexState().clear();
		vv.getPickedEdgeState().clear();
	}
	
	@Override
	public void setAllLinksVisible(boolean visible)
	{
		if (visible) hiddenLinks.clear();
		else hiddenLinks.addAll(linkTable.values());
		
		refresh();
	}
	
	@Override
	public void setAllNodesVisible(boolean visible)
	{
		if (visible) hiddenNodes.clear();
		else hiddenNodes.addAll(nodeTable.values());
		
		refresh();
	}
	
	@Override
	public void setLinkDown(long linkId)
	{
		linksDown.add(linkTable.get(linkId));
		refresh();
	}

	@Override
	public void setLinkUp(long linkId)
	{
		linksDown.remove(linkTable.get(linkId));
		refresh();
	}

	@Override
	public void setLinkVisible(long linkId, boolean visible)
	{
		Link link = linkTable.get(linkId);
		if (visible) hiddenLinks.remove(link);
		else hiddenLinks.add(link);
		
		refresh();
	}
	
	@Override
	public void setLinksVisible(Collection<Long> linkIds, boolean visible)
	{
		for(long linkId : linkIds)
		{
			Link link = linkTable.get(linkId);
			if (visible) hiddenLinks.remove(link);
			else hiddenLinks.add(link);
		}

		refresh();
	}
	
	@Override
	public void setNodeDown(long nodeId)
	{
		nodesDown.add(nodeTable.get(nodeId));
		refresh();
	}
	
	@Override
	public void setNodeUp(long nodeId)
	{
		nodesDown.remove(nodeTable.get(nodeId));
		refresh();
	}

	@Override
	public void setNodeVisible(long nodeId, boolean visible)
	{
		Node node = nodeTable.get(nodeId);
		if (visible) hiddenNodes.remove(node);
		else hiddenNodes.add(node);
		
		refresh();
	}
	
	@Override
	public void setNodeName(long nodeId, String name)
	{
		Node node = nodeTable.get(nodeId);
		node.setLabel(name);
		
		if (showNodeNames) refresh();
	}

	@Override
	public void setNodeXYPosition(long nodeId, Point2D pos)
	{
		Node node = nodeTable.get(nodeId);
		node.setPosition(pos);
		l.setLocation(node, transformer.transform(node));
	}

	@Override
	public void setNodesVisible(Collection<Long> nodeIds, boolean visible)
	{
		for(long nodeId : nodeIds)
		{
			Node node = nodeTable.get(nodeId);
			if (visible) hiddenNodes.remove(node);
			else hiddenNodes.add(node);
		}
		
		refresh();
	}
	
	@Override
	public void showLinkIds(boolean show)
	{
		if (showLinkIds != show)
		{
			showLinkIds = show;
			refresh();
		}
	}

	@Override
	public void showNodeNames(boolean show)
	{
		if (showNodeNames != show)
		{
			showNodeNames = show;
			refresh();
		}
	}

	@Override
	public void showNodesAndLinks(Collection<Pair<Long,Color>> nodeIds, Collection<Pair<Long,Color>> linkIds)
	{
		resetPickedState();

		System.out.println ("showNodesAndLinks : nodeIds; " + nodeIds + ", linkIds: " + linkIds);
		
		if (nodeIds != null)
		{
			for (Pair<Long,Color> nodeId : nodeIds)
			{
				Node aux = nodeTable.get(nodeId.getFirst ());
				vv.getPickedVertexState().pick(aux, true);
			}
		}

		if (linkIds != null)
		{
			for (Pair<Long,Color> linkId : linkIds)
			{
				Link aux = linkTable.get(linkId.getFirst ());
				vv.getPickedEdgeState().pick(aux, true);
			}
		}
	}

	@Override
	public void showNonConnectedNodes(boolean show)
	{
		if (showHideNonConnectedNodes != show)
		{
			showHideNonConnectedNodes = show;
			refresh();
		}
	}

	@Override
	public void showRoutes(Collection<Pair<Long,Color>> primaryRouteLinks, Collection<Pair<Long,Color>> secondaryRouteLinks)
	{
		resetPickedState();
		
		if (secondaryRouteLinks != null) for (Pair<Long,Color> linkId : secondaryRouteLinks) backupPath.add(linkTable.get(linkId.getFirst ()));
		if (primaryRouteLinks != null) for (Pair<Long,Color> linkId : primaryRouteLinks) backupPath.remove(linkTable.get(linkId.getFirst ()));

		if (primaryRouteLinks != null) for (Pair<Long,Color> linkId : primaryRouteLinks) vv.getPickedEdgeState().pick(linkTable.get(linkId.getFirst ()), true);
		for (Link link : backupPath) vv.getPickedEdgeState().pick(link, true);
	}

	@Override
	public void takeSnapshot_preConfigure()
	{
		vv.setBackground(Color.WHITE);
	}

	@Override
	public void takeSnapshot_postConfigure()
	{
		vv.setBackground(CANVAS_BGCOLOR);
	}

	@Override
	public void updateTopology(Map<Long, Point2D> nodeXYPositionMap, Map<Long, String> nodeNameMap, Map<Long, Pair<Long, Long>> linkMap)
	{
		reset();
		
		if (nodeXYPositionMap.isEmpty()) return;

		Set<Long> nodeIds = nodeXYPositionMap.keySet();
		for (long nodeId : nodeIds)
		{
			Point2D aux = nodeXYPositionMap.get(nodeId);
			double xCoord_thisNode = aux.getX();
			double yCoord_thisNode = aux.getY();
			
			addNode(nodeId, new Point2D.Double(xCoord_thisNode, yCoord_thisNode), nodeNameMap.get(nodeId));
		}

		Set<Long> linkIds = linkMap.keySet();
		for (long linkId : linkIds)
		{
			Pair<Long, Long> aux = linkMap.get(linkId);
			long originNodeId = aux.getFirst();
			long destinationNodeId = aux.getSecond();
			
			addLink(linkId, originNodeId, destinationNodeId);
		}

		refresh();
	}

	@Override
	public void zoomAll()
	{
		Set<Node> nodes = new LinkedHashSet<Node>(g.getVertices());
		nodes.removeAll(hiddenNodes);
		
		if (nodes.isEmpty()) return;

		double aux_xmax = Double.NEGATIVE_INFINITY;
		double aux_xmin = Double.POSITIVE_INFINITY;
		double aux_ymax = Double.NEGATIVE_INFINITY;
		double aux_ymin = Double.POSITIVE_INFINITY;

		for(Node node : nodes)
		{
			Point2D aux = node.getPosition();
			if (aux_xmax < aux.getX()) aux_xmax = aux.getX();
			if (aux_xmin > aux.getX()) aux_xmin = aux.getX();
			if (aux_ymax < aux.getY()) aux_ymax = aux.getY();
			if (aux_ymin > aux.getY()) aux_ymin = aux.getY();
		}

		double PRECISION_FACTOR = 0.00001;

		Rectangle viewInLayoutUnits = vv.getRenderContext().getMultiLayerTransformer().inverseTransform(vv.getBounds()).getBounds();
		float ratio_h = Math.abs(aux_xmax - aux_xmin) < PRECISION_FACTOR ? 1 : (float) (viewInLayoutUnits.getWidth() / (aux_xmax - aux_xmin));
		float ratio_v = Math.abs(aux_ymax - aux_ymin) < PRECISION_FACTOR ? 1 : (float) (viewInLayoutUnits.getHeight() / (aux_ymax - aux_ymin));
		float ratio = (float) (0.8 * Math.min(ratio_h, ratio_v));
		scalingControl.scale(vv, ratio, vv.getCenter());

		/* Generate an auxiliary node at center of the graph */
		Node aux = new Node(-1, new Point2D.Double((aux_xmin + aux_xmax) / 2, (aux_ymin + aux_ymax) / 2));
		Point2D q = l.transform(aux);
		Point2D lvc = vv.getRenderContext().getMultiLayerTransformer().inverseTransform(vv.getCenter());
		double dx = (lvc.getX() - q.getX());
		double dy = (lvc.getY() - q.getY());
		vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT).translate(dx, dy);
	}

	@Override
	public void zoomIn()
	{
		zoomIn(vv.getCenter());
	}

	@Override
	public void zoomOut()
	{
		zoomOut(vv.getCenter());
	}

	private void addLink(long linkId, long originNodeId, long destinationNodeId, String label)
	{
		if (linkTable.containsKey(linkId)) throw new RuntimeException("Bad - Link " + linkId + " already exists");
		if (originNodeId == destinationNodeId) throw new Net2PlanException("Self-links are not allowed");

		Link link = new Link(linkId, nodeTable.get(originNodeId), nodeTable.get(destinationNodeId), label);
		linkTable.put(linkId, link);
		g.addEdge(link, link.getOriginNode(), link.getDestinationNode());
	}

	private void removeLink(long linkId, boolean alsoFromGraph)
	{
		Link link = linkTable.get(linkId);
		
		linkTable.remove(linkId);
		
		if (alsoFromGraph)
		{
			g.removeEdge(link);
			refresh();
		}
	}

	private void zoomIn(Point2D point)
	{
		scalingControl.scale(vv, scaleIn, point);
	}

	private void zoomOut(Point2D point)
	{
		scalingControl.scale(vv, scaleOut, point);
	}

    private final class LinkDisplayPredicate<Node, Link> implements Predicate<Context<Graph<Node, Link>, Link>>
    {
		@Override
        public boolean evaluate(Context<Graph<Node, Link>, Link> context)
        {
        	com.net2plan.gui.utils.topology.Link e = (com.net2plan.gui.utils.topology.Link) context.element;
			return !hiddenLinks.contains(e);
        }
    }
	
	private class LinkIdRenderer extends BasicEdgeLabelRenderer<Node, Link>
	{
		@Override
		public void labelEdge(RenderContext<Node, Link> rc, Layout<Node, Link> layout, Link e, String label)
		{
			if (showLinkIds) super.labelEdge(rc, layout, e, e.getLabel());
		}
	}

    private final class NodeDisplayPredicate<Node, Link> implements Predicate<Context<Graph<Node, Link>, Node>>
    {
		@Override
        public boolean evaluate(Context<Graph<Node, Link>, Node> context)
		{
        	com.net2plan.gui.utils.topology.Node v = (com.net2plan.gui.utils.topology.Node) context.element;
			if (!showHideNonConnectedNodes)
			{
				Collection<com.net2plan.gui.utils.topology.Link> outLinks = g.getOutEdges(v);
				if (outLinks == null) outLinks = new LinkedHashSet<com.net2plan.gui.utils.topology.Link>();

				Collection<com.net2plan.gui.utils.topology.Link> inLinks = g.getInEdges(v);
				if (inLinks == null) inLinks = new LinkedHashSet<com.net2plan.gui.utils.topology.Link>();
				
				if (inLinks.isEmpty() && outLinks.isEmpty())
					return false;
			}
			
			return !hiddenNodes.contains(v);
        }
    }
	
	private class NodeLabelRenderer extends BasicVertexLabelRenderer<Node, Link>
	{
		@Override
		public void labelVertex(RenderContext<Node, Link> rc, Layout<Node, Link> layout, Node v, String label)
		{
			Graph<Node, Link> graph = layout.getGraph();
			if (rc.getVertexIncludePredicate().evaluate(Context.<Graph<Node, Link>, Node>getInstance(graph, v)) == false)
			{
				return;
			}

			Point2D pt = layout.transform(v);
			pt = rc.getMultiLayerTransformer().transform(Layer.LAYOUT, pt);

			float x = (float) pt.getX();
			float y = (float) pt.getY();

			Component component = prepareRenderer(rc, rc.getVertexLabelRenderer(), "<html><font color='white'>" + v.getId() + "</font></html>", rc.getPickedVertexState().isPicked(v), v);
			GraphicsDecorator g = rc.getGraphicsContext();
			Dimension d = component.getPreferredSize();
			AffineTransform xform = AffineTransform.getTranslateInstance(x, y);

			Shape shape = rc.getVertexShapeTransformer().transform(v);
			shape = xform.createTransformedShape(shape);
			GraphicsDecorator gd = rc.getGraphicsContext();
			if (gd instanceof TransformingGraphics)
			{
				BidirectionalTransformer transformer = ((TransformingGraphics) gd).getTransformer();
				if (transformer instanceof ShapeTransformer)
				{
					ShapeTransformer shapeTransformer = (ShapeTransformer) transformer;
					shape = shapeTransformer.transform(shape);
				}
			}

			Rectangle2D bounds = shape.getBounds2D();

			Point p = getAnchorPoint(bounds, d, Renderer.VertexLabel.Position.CNTR);
			g.draw(component, rc.getRendererPane(), p.x, p.y, d.width, d.height, true);

			if (showNodeNames)
			{
				component = prepareRenderer(rc, rc.getVertexLabelRenderer(), "<html><font color='black'>" + v.getLabel() + "</font></html>", rc.getPickedVertexState().isPicked(v), v);
				g = rc.getGraphicsContext();
				d = component.getPreferredSize();
				xform = AffineTransform.getTranslateInstance(x, y);

				shape = rc.getVertexShapeTransformer().transform(v);
				shape = xform.createTransformedShape(shape);
				if (rc.getGraphicsContext() instanceof TransformingGraphics)
				{
					BidirectionalTransformer transformer = ((TransformingGraphics) rc.getGraphicsContext()).getTransformer();
					if (transformer instanceof ShapeTransformer)
					{
						ShapeTransformer shapeTransformer = (ShapeTransformer) transformer;
						shape = shapeTransformer.transform(shape);
					}
				}

				bounds = shape.getBounds2D();

				p = getAnchorPoint(bounds, d, Renderer.VertexLabel.Position.NE);
				g.draw(component, rc.getRendererPane(), p.x, p.y, d.width, d.height, true);
			}
		}

		@Override
		protected Point getAnchorPoint(Rectangle2D vertexBounds, Dimension labelSize, Renderer.VertexLabel.Position position)
		{
			double x;
			double y;
			int offset = 5;
			switch (position)
			{
				case NE:
					x = vertexBounds.getMaxX() - offset;
					y = vertexBounds.getMinY() + offset - labelSize.height;
					return new Point((int) x, (int) y);
				case CNTR:
					x = vertexBounds.getCenterX() - ((double) labelSize.width / 2);
					y = vertexBounds.getCenterY() - ((double) labelSize.height / 2);
					return new Point((int) x, (int) y);

				default:
					return new Point();
			}

		}
	}

	private static class ScalingCanvasPlugin extends ScalingGraphMousePlugin implements ITopologyCanvasPlugin
	{
		public ScalingCanvasPlugin(ScalingControl scaler, int modifiers)
		{
			super(scaler, modifiers, scaleOut, scaleIn);
			setZoomAtMouse(false);
		}

		@Override
		public void setCanvas(ITopologyCanvas canvas)
		{
		}
	}

	private class StateAwareTransformer<Object, Paint> implements Transformer<Object, Paint>
	{
		private final Transformer<Object, Paint> transformer;

		public StateAwareTransformer(Transformer<Object, Paint> transformer)
		{
			this.transformer = transformer;
		}

		@Override
		public Paint transform(Object o)
		{
			if ((o instanceof Node && nodesDown.contains((Node) o)) || (o instanceof Link && linksDown.contains((Link) o)))
			{
				return (Paint) Color.RED;
			}

			return transformer.transform(o);
		}
	}

	private static class TransformerImpl implements Transformer<Node, Point2D>
	{
		@Override
		public Point2D transform(Node vertex)
		{
			Point2D pos = vertex.getPosition();
			return new Point2D.Double(pos.getX(), -pos.getY());
		}
	}
}