/*******************************************************************************
 * Copyright (c) 2013-2015 Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 *
 * Contributors:
 *     Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza - initial API and implementation
 ******************************************************************************/
package com.net2plan.cli.tools;

import com.net2plan.internal.plugins.ICLIModule;
import com.net2plan.interfaces.networkDesign.Configuration;
import com.net2plan.interfaces.networkDesign.IReport;
import com.net2plan.interfaces.networkDesign.NetPlan;
import com.net2plan.internal.CommandLineParser;
import com.net2plan.utils.ClassLoaderUtils;
import com.net2plan.utils.HTMLUtils;
import com.net2plan.utils.StringUtils;
import com.net2plan.utils.Triple;
import java.io.File;
import java.util.List;
import java.util.Map;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PatternOptionBuilder;

/**
 * Reporting tool (CLI mode).
 * 
 * @author Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza
 * @since 0.2.3
 */
public class CLIReport extends ICLIModule
{
	private final static String title = "Reporting tool";
	private final static Options options;

	static
	{
		options = new Options();

		Option inputFile = new Option(null, "input-file", true, "Input .n2p file");
		inputFile.setType(PatternOptionBuilder.FILE_VALUE);
		inputFile.setArgName("file");
		inputFile.setRequired(true);
		options.addOption(inputFile);
		
		Option classFile = new Option(null, "class-file", true, ".class/.jar file containing the report");
		classFile.setType(PatternOptionBuilder.FILE_VALUE);
		classFile.setArgName("file");
		classFile.setRequired(true);
		options.addOption(classFile);

		Option className = new Option(null, "class-name", true, "Class name of the report (package name could be omitted)");
		className.setType(PatternOptionBuilder.STRING_VALUE);
		className.setArgName("classname");
		className.setRequired(true);
		options.addOption(className);

		Option outputFile = new Option(null, "output-file", true, "Output .html file (extra .png files could be saved)");
		outputFile.setType(PatternOptionBuilder.FILE_VALUE);
		outputFile.setArgName("file");
		outputFile.setRequired(true);
		options.addOption(outputFile);

		Option reportParameters = new Option(null, "report-param", true, "(Optional) report parameters (use one of this for each parameter)");
		reportParameters.setArgName("property=value");
		reportParameters.setArgs(2);
		reportParameters.setValueSeparator('=');
		options.addOption(reportParameters);
	}

	@Override
	public void executeFromCommandLine(String[] args) throws ParseException
	{
		CommandLineParser parser = new CommandLineParser();
		CommandLine cli = parser.parse(options, args);

		File classFile = (File) cli.getParsedOptionValue("class-file");
		String className = (String) cli.getParsedOptionValue("class-name");

		File inputFile = (File) cli.getParsedOptionValue("input-file");
		NetPlan netPlan = new NetPlan(inputFile);

		File outputFile = (File) cli.getParsedOptionValue("output-file");

		IReport report = ClassLoaderUtils.getInstance(classFile, className, IReport.class);

		List<Triple<String, String, String>> defaultReportParameters = null;
		try { defaultReportParameters = report.getParameters(); }
		catch(UnsupportedOperationException ex) { }
		
		Map<String, String> reportParameters = CommandLineParser.getParameters(defaultReportParameters, cli.getOptionProperties("report-param"));
		Map<String, String> net2planParameters = Configuration.getNet2PlanOptions();

		System.out.println("Net2Plan parameters");
		System.out.println("-----------------------------");
		System.out.println(StringUtils.mapToString(net2planParameters, "=", String.format("%n")));
		System.out.println();
		System.out.println("Report parameters");
		System.out.println("-----------------------------");
		System.out.println(reportParameters.isEmpty() ? "None" : StringUtils.mapToString(reportParameters, "=", String.format("%n")));
		System.out.println();
		System.out.println("Executing report...");
		System.out.println();

		long init = System.nanoTime();
		String html = report.executeReport(netPlan, reportParameters, net2planParameters);
		long end = System.nanoTime();

		HTMLUtils.saveToFile(outputFile, html);

		System.out.println(String.format("%n%nReport finished successfully in %f seconds", (end - init) / 1e9));
	}

	@Override
	public String getCommandLineHelp()
	{
		return "Permits the generation of built-in or "
				+ "user-defined reports, from any network design";
	}

	@Override
	public Options getCommandLineOptions()
	{
		return options;
	}

	@Override
	public String getDescription()
	{
		return getName();
	}

	@Override
	public String getModeName()
	{
		return "report";
	}

	@Override
	public String getName()
	{
		return title + " (CLI)";
	}

	@Override
	public List<Triple<String, String, String>> getParameters()
	{
		return null;
	}
}
